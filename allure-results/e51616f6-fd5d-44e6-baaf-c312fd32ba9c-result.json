{"name": "test_vmo_login_negative", "status": "skipped", "statusDetails": {"message": "XFAIL reason: Failed\n\n_pytest.outcomes.XFailed: Failed", "trace": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"406cd723bc15094eabad6c22c24dbbe5\")>\n\n    @allure.epic(\"VWO Login Test\")\n    @allure.feature(\"TC#0 - VWO App Negative Test\")\n    @pytest.mark.negative\n    def test_vmo_login_negative(setup):\n        try:\n            driver = setup\n            loginPage = LoginPage(driver)\n>           loginPage.login_to_vmo(usr=\"admin@admingmail.com\", pwd=\"admin\")\n\ntests/vwoLoginTests/test_vwo_login.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/pageObjects/loginPage.py:54: in login_to_vmo\n    self.get_username().send_keys(usr)\ntests/pageObjects/loginPage.py:37: in get_username\n    return self.driver.find_element(*LoginPage.username)\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7011a5c8ea10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\\\n#14 0x583566b0a0f0 \\\\u003Cunknown>\\\\n#15 0x583566b19f14 \\\\u003Cunknown>\\\\n#16 0x6fffbaa94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=124.0.6367.118)\nE       Stacktrace:\nE       #0 0x583566b1adc3 <unknown>\nE       #1 0x5835668094e7 <unknown>\nE       #2 0x5835667dfb7e <unknown>\nE       #3 0x58356687e70d <unknown>\nE       #4 0x5835668945b6 <unknown>\nE       #5 0x5835668761f3 <unknown>\nE       #6 0x58356684728a <unknown>\nE       #7 0x583566847c5e <unknown>\nE       #8 0x583566adf0eb <unknown>\nE       #9 0x583566ae303b <unknown>\nE       #10 0x583566acb201 <unknown>\nE       #11 0x583566ae3ba2 <unknown>\nE       #12 0x583566ab00bf <unknown>\nE       #13 0x583566b09f18 <unknown>\nE       #14 0x583566b0a0f0 <unknown>\nE       #15 0x583566b19f14 <unknown>\nE       #16 0x6fffbaa94ac3 <unknown>\n\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"406cd723bc15094eabad6c22c24dbbe5\")>\n\n    @allure.epic(\"VWO Login Test\")\n    @allure.feature(\"TC#0 - VWO App Negative Test\")\n    @pytest.mark.negative\n    def test_vmo_login_negative(setup):\n        try:\n            driver = setup\n            loginPage = LoginPage(driver)\n            loginPage.login_to_vmo(usr=\"admin@admingmail.com\", pwd=\"admin\")\n            time.sleep(5)\n            error_message = loginPage.get_error_message_text()\n            assert error_message == \"Yours email, password, IP address or location did not match\"\n        except Exception as e:\n>           pytest.xfail(\"Failed\")\nE           _pytest.outcomes.XFailed: Failed\n\ntests/vwoLoginTests/test_vwo_login.py:51: XFailed"}, "start": 1716013632564, "stop": 1716013632567, "uuid": "fbff914f-41a9-46e7-908b-e1ddddb3c79f", "historyId": "349a213039146d483367d6565fd95156", "testCaseId": "349a213039146d483367d6565fd95156", "fullName": "tests.vwoLoginTests.test_vwo_login#test_vmo_login_negative", "labels": [{"name": "epic", "value": "VWO Login Test"}, {"name": "feature", "value": "TC#0 - VWO App Negative Test"}, {"name": "tag", "value": "negative"}, {"name": "parentSuite", "value": "tests.vwoLoginTests"}, {"name": "suite", "value": "test_vwo_login"}, {"name": "host", "value": "atish-inspiron-15-3511"}, {"name": "thread", "value": "11978-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.vwoLoginTests.test_vwo_login"}]}