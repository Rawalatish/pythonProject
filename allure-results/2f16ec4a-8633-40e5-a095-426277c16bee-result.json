{"name": "test_vmo_login_positive", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 99\nCurrent browser version is 124.0.6367.118 with binary path /usr/bin/google-chrome\nStacktrace:\n#0 0x628cd835f7d3 <unknown>\n#1 0x628cd80bb688 <unknown>\n#2 0x628cd80e26a0 <unknown>\n#3 0x628cd80dde36 <unknown>\n#4 0x628cd80da68f <unknown>\n#5 0x628cd8115355 <unknown>\n#6 0x628cd810f5a3 <unknown>\n#7 0x628cd80e4ddc <unknown>\n#8 0x628cd80e5de5 <unknown>\n#9 0x628cd839049d <unknown>\n#10 0x628cd83a960c <unknown>\n#11 0x628cd8392205 <unknown>\n#12 0x628cd83a9ee5 <unknown>\n#13 0x628cd8386070 <unknown>\n#14 0x628cd83c5488 <unknown>\n#15 0x628cd83c560c <unknown>\n#16 0x628cd83dec6d <unknown>\n#17 0x796f6a694ac3 <unknown>", "trace": "@pytest.fixture()\n    def setup():\n>       driver = webdriver.Chrome()\n\ntests/vwoLoginTests/test_vwo_login.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n.venv/lib/python3.10/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:208: in __init__\n    self.start_session(capabilities)\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:292: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7e5edae86f80>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...\\\\n#15 0x628cd83c560c \\\\u003Cunknown>\\\\n#16 0x628cd83dec6d \\\\u003Cunknown>\\\\n#17 0x796f6a694ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 99\nE       Current browser version is 124.0.6367.118 with binary path /usr/bin/google-chrome\nE       Stacktrace:\nE       #0 0x628cd835f7d3 <unknown>\nE       #1 0x628cd80bb688 <unknown>\nE       #2 0x628cd80e26a0 <unknown>\nE       #3 0x628cd80dde36 <unknown>\nE       #4 0x628cd80da68f <unknown>\nE       #5 0x628cd8115355 <unknown>\nE       #6 0x628cd810f5a3 <unknown>\nE       #7 0x628cd80e4ddc <unknown>\nE       #8 0x628cd80e5de5 <unknown>\nE       #9 0x628cd839049d <unknown>\nE       #10 0x628cd83a960c <unknown>\nE       #11 0x628cd8392205 <unknown>\nE       #12 0x628cd83a9ee5 <unknown>\nE       #13 0x628cd8386070 <unknown>\nE       #14 0x628cd83c5488 <unknown>\nE       #15 0x628cd83c560c <unknown>\nE       #16 0x628cd83dec6d <unknown>\nE       #17 0x796f6a694ac3 <unknown>\n\n.venv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: SessionNotCreatedException"}, "attachments": [{"name": "log", "source": "a637d8b8-08c9-469f-b5a7-b272c866e6c7-attachment.txt", "type": "text/plain"}], "start": 1715873557783, "stop": 1715873557783, "uuid": "2b72bcb3-0449-4bad-835e-1f0d0cc64900", "historyId": "d65fb533f7145ddf45312b6ac3f60735", "testCaseId": "d65fb533f7145ddf45312b6ac3f60735", "fullName": "tests.vwoLoginTests.test_vwo_login#test_vmo_login_positive", "labels": [{"name": "feature", "value": "TC#1 - VWO App Positive Test"}, {"name": "epic", "value": "VWO Login Test"}, {"name": "tag", "value": "positive"}, {"name": "parentSuite", "value": "tests.vwoLoginTests"}, {"name": "suite", "value": "test_vwo_login"}, {"name": "host", "value": "atish-inspiron-15-3511"}, {"name": "thread", "value": "17760-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.vwoLoginTests.test_vwo_login"}]}